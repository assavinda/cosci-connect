'use client';

import Link from "next/link";
import React, { useState, useRef, useEffect } from "react";
import { useSession } from "next-auth/react";
import axios from "axios";
import { format } from "date-fns";
import { th } from "date-fns/locale";
import Loading from "../common/Loading";
import { usePusher } from "../../../providers/PusherProvider";

interface ChatMessage {
  id: string;
  sender: 'me' | 'other';
  content: string;
  timestamp: string;
  isRead: boolean;
}

interface ChatContact {
  userId: string;
  name: string;
  profileImageUrl: string | null;
  role?: string;
  lastMessage: string;
  timestamp: string; 
  unreadCount: number;
}

interface ChatWindowProps {
  isOpen: boolean;
  onClose: () => void;
  recipientId?: string;
  recipientName?: string;
  initialView?: 'inbox' | 'chat';
}

function ChatWindow({ 
  isOpen, 
  onClose, 
  recipientId, 
  recipientName,
  initialView = 'inbox' 
}: ChatWindowProps) {
  const { data: session, status } = useSession();
  const [view, setView] = useState<'inbox' | 'chat'>(initialView);
  const [selectedChat, setSelectedChat] = useState<ChatContact | null>(null);
  const [chatList, setChatList] = useState<ChatContact[]>([]);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const chatEndRef = useRef<HTMLDivElement>(null);
  const chatWindowRef = useRef<HTMLDivElement>(null);
  
  // ‡πÉ‡∏ä‡πâ Pusher hooks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  const { 
    subscribeToChatMessages, 
    subscribeToChatListUpdates,
    subscribeToMessageReadUpdates
  } = usePusher();
  
  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
  useEffect(() => {
    if (isOpen && status === 'authenticated') {
      if (initialView === 'inbox') {
        fetchChatList();
      } else if (initialView === 'chat' && recipientId) {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        fetchMessages(recipientId, recipientName);
      }
    }
  }, [isOpen, status, initialView, recipientId, recipientName]);

  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ä‡∏ó
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: "auto" });
    }
  }, [messages]);
  
  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ä‡∏ó
  useEffect(() => {
    if (!loading && messages.length > 0 && view === "chat" && chatEndRef.current) {
      // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DOM ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
      setTimeout(() => {
        chatEndRef.current?.scrollIntoView({ behavior: "auto" });
      }, 100);
    }
  }, [loading, selectedChat, view]);

  // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  useEffect(() => {
    if (!session?.user?.id || !isOpen) return;
    
    const userId = session.user.id;
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    const handleNewMessage = (data: any) => {
      console.log('üì® New message received:', data);
      
      if (data.message) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (view === 'chat' && selectedChat?.userId === data.senderId) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          setMessages(prevMessages => [
            ...prevMessages,
            {
              id: data.message.id,
              content: data.message.content,
              sender: 'other',
              timestamp: data.message.timestamp,
              isRead: false
            }
          ]);
          
          // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
          markAsRead(data.senderId);
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
          fetchChatList();
        }
      }
    };
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
    const handleChatListUpdate = (data: any) => {
      console.log('üìã Chat list updated:', data);
      fetchChatList();
    };
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const handleMessageRead = (data: any) => {
      console.log('‚úì Messages marked as read by:', data.by);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
      if (view === 'chat' && selectedChat?.userId === data.by) {
        setMessages(prevMessages => 
          prevMessages.map(msg => 
            msg.sender === 'me' ? { ...msg, isRead: true } : msg
          )
        );
      }
    };
    
    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
    const unsubscribeChatMessages = subscribeToChatMessages(userId, handleNewMessage);
    
    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
    const unsubscribeChatList = subscribeToChatListUpdates(userId, handleChatListUpdate);
    
    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const unsubscribeMessageRead = subscribeToMessageReadUpdates(userId, handleMessageRead);
    
    return () => {
      unsubscribeChatMessages();
      unsubscribeChatList();
      unsubscribeMessageRead();
    };
  }, [session?.user?.id, isOpen, view, selectedChat, subscribeToChatMessages, subscribeToChatListUpdates, subscribeToMessageReadUpdates]);

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchChatList = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await axios.get('/api/messages');
      setChatList(response.data.chatList || []);
    } catch (err) {
      console.error('Error fetching chat list:', err);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  const fetchMessages = async (userId: string, userName?: string) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await axios.get(`/api/messages?userId=${userId}`);
      
      setMessages(response.data.messages || []);
      
      if (response.data.otherUser) {
        setSelectedChat({
          userId: response.data.otherUser.id,
          name: response.data.otherUser.name,
          profileImageUrl: response.data.otherUser.profileImageUrl,
          role: response.data.otherUser.role || 'unknown',
          lastMessage: response.data.messages.length > 0 ? 
            response.data.messages[response.data.messages.length - 1].content : '',
          timestamp: response.data.messages.length > 0 ? 
            response.data.messages[response.data.messages.length - 1].timestamp : new Date().toISOString(),
          unreadCount: 0
        });
      } else if (userId && userName) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
        setSelectedChat({
          userId: userId,
          name: userName,
          profileImageUrl: null,
          role: 'unknown',
          lastMessage: '',
          timestamp: new Date().toISOString(),
          unreadCount: 0
        });
      }
      
      setView('chat');
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ
      setChatList(prevList => {
        return prevList.map(chat => {
          if (chat.userId === userId) {
            return {
              ...chat,
              unreadCount: 0
            };
          }
          return chat;
        });
      });
    } catch (err) {
      console.error('Error fetching messages:', err);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  const sendMessage = async () => {
    if (newMessage.trim() === "" || !selectedChat) return;
    
    try {
      const response = await axios.post('/api/messages', {
        receiverId: selectedChat.userId,
        content: newMessage
      });
      
      if (response.data.success) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        setMessages([...messages, response.data.message]);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
        updateChatListWithNewMessage(selectedChat.userId, newMessage);
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        setNewMessage("");
      }
    } catch (err) {
      console.error('Error sending message:', err);
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  };
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  const updateChatListWithNewMessage = (userId: string, content: string) => {
    setChatList(prevList => {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      const existingChatIndex = prevList.findIndex(chat => chat.userId === userId);
      
      if (existingChatIndex >= 0) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const updatedList = [...prevList];
        updatedList[existingChatIndex] = {
          ...updatedList[existingChatIndex],
          lastMessage: content,
          timestamp: new Date().toISOString(),
          unreadCount: 0 // ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        };
        
        // ‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        const chat = updatedList.splice(existingChatIndex, 1)[0];
        return [chat, ...updatedList];
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        if (selectedChat) {
          const newChat = {
            ...selectedChat,
            lastMessage: content,
            timestamp: new Date().toISOString(),
            unreadCount: 0
          };
          return [newChat, ...prevList];
        }
      }
      
      return prevList;
    });
  };

  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (chatWindowRef.current && !chatWindowRef.current.contains(event.target as Node)) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isSendMessageButton = (event.target as Element).closest('button[aria-label="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"]');
        if (!isSendMessageButton && isOpen) {
          onClose();
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);

  // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const openChat = (chat: ChatContact) => {
    setSelectedChat(chat);
    fetchMessages(chat.userId);
    setView("chat");
  };

  // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ inbox
  const backToInbox = () => {
    setView("inbox");
    setSelectedChat(null);
    fetchChatList(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
  };

  // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
  const markAsRead = async (senderId: string) => {
    try {
      await axios.patch('/api/messages', { senderId });
    } catch (err) {
      console.error('Error marking messages as read:', err);
    }
  };

  // ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  const formatTime = (timestamp: string) => {
    try {
      const date = new Date(timestamp);
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (date >= today) {
        return format(date, 'HH:mm', { locale: th });
      } 
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô"
      else if (date >= yesterday) {
        return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô';
      } 
      // ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      else {
        return format(date, 'dd/MM/yyyy', { locale: th });
      }
    } catch (error) {
      return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤";
    }
  };

  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏ä‡∏ó
  if (status === 'unauthenticated') {
    onClose();
    return null;
  }

  return (
    <div 
      ref={chatWindowRef}
      className="fixed bottom-20 sm:bottom-10 right-6 sm:right-28 w-full sm:w-80 h-[360px] bg-white/90 backdrop-blur-md rounded-xl shadow-xl flex flex-col overflow-hidden z-50"
      style={{ maxWidth: 'calc(100vw - 48px)' }}
    >
      {/* Header */}
      <div className="bg-primary-blue-500 p-2 text-white flex justify-between items-center">
        <div className="flex items-center gap-2">
          {view === "chat" && (
            <button 
              className="p-1 rounded-full hover:bg-primary-blue-400" 
              onClick={backToInbox}
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                width="24" 
                height="24" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                strokeWidth="2"
                strokeLinecap="round" 
                strokeLinejoin="round"
              >
                <polyline points="15 18 9 12 15 6"></polyline>
              </svg>
            </button>
          )}
          {view === "inbox" ? (
            <h3 className="font-medium text-s ml-1">
              ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            </h3>
          ) : (
            <Link href={`/user/${
              selectedChat?.role === 'student' 
                ? `freelance/${selectedChat?.userId || ''}` 
                : `customer/${selectedChat?.userId || ''}`
            }`}>
              <h3 className="font-medium text-s ml-1 cursor-pointer">
                {selectedChat?.name || recipientName || "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}
              </h3>
            </Link>
          )}
        </div>
        <button 
          className="p-1 rounded-full hover:bg-primary-blue-400" 
          onClick={onClose}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="24" 
            height="24" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2" 
            strokeLinecap="round" 
            strokeLinejoin="round"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto">
        {error ? (
          <div className="flex flex-col items-center justify-center h-full p-4">
            <p className="text-red-500 text-center">{error}</p>
            <button 
              className="mt-2 text-primary-blue-500 hover:underline"
              onClick={() => view === 'inbox' ? fetchChatList() : fetchMessages(selectedChat?.userId || recipientId || '')}
            >
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </button>
          </div>
        ) : view === "inbox" ? (
          // Inbox View
          <div className="p-0 h-full">
            {chatList.length > 0 ? (
              chatList.map((chat) => (
                <div 
                  key={chat.userId} 
                  className={`p-3 flex items-center gap-3 cursor-pointer border-b border-gray-100 hover:bg-gray-500/5 transition-colors relative ${chat.unreadCount > 0 ? 'bg-primary-blue-400/10' : ''}`}
                  onClick={() => openChat(chat)}
                >
                  <div className="size-10 bg-gray-300 rounded-full flex-shrink-0 relative overflow-hidden">
                    {chat.profileImageUrl ? (
                      <img 
                        src={chat.profileImageUrl} 
                        alt={chat.name} 
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="absolute inset-0 rounded-full bg-gradient-to-br from-primary-blue-400 to-primary-blue-600 flex items-center justify-center text-white font-medium">
                        {chat.name.charAt(0).toUpperCase()}
                      </div>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex justify-between items-center">
                      <p className="font-medium truncate">{chat.name}</p>
                      <span className="text-xs text-gray-500">{formatTime(chat.timestamp)}</span>
                    </div>
                    <div className="flex justify-between place-items-center mt-1">
                      <p className="text-sm text-gray-600 truncate">{chat.lastMessage}</p>
                      {chat.unreadCount > 0 && (
                        <div className="size-fit px-2 bg-red-500 rounded-full">
                          <p className="text-xs text-white font-medium">
                            {chat.unreadCount}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))
            ) : loading ? (
              <div className="flex justify-center place-items-center h-full">
                <Loading size="medium" color="primary"/>
              </div>
            ) : (
              <div className="p-6 text-center text-gray-500">
                ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
              </div>
            )}
          </div>
        ) : (
          // Chat View
          <div className="p-3 flex flex-col gap-1 h-full">
            {loading ? (
              <div className="flex justify-center items-center h-full">
                <Loading size="medium" color="primary" />
              </div>
            ) : messages.length > 0 ? (
              messages.map((msg) => (
                <div 
                  key={msg.id} 
                  className={`flex place-items-end ${msg.sender === "me" ? "justify-end" : "justify-start"}`}
                >
                  {msg.sender === "me" && (
                    <div className="flex flex-col items-end mb-2 mx-1">
                      {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô */}
                      {msg.isRead && (
                        <p className="text-xs text-primary-blue-400">‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</p>
                      )}
                      <p className="text-xs text-gray-400">
                        {formatTime(msg.timestamp)}
                      </p>
                    </div>
                  )}
                  <div className={`max-w-[75%] p-2 rounded-xl mb-2 ${ 
                    msg.sender === "me" 
                      ? "bg-primary-blue-400 text-white rounded-br-none" 
                      : "bg-gray-200 text-gray-800 rounded-bl-none"
                  }`}>
                    <p className="whitespace-pre-wrap break-words">{msg.content}</p>
                  </div>
                  {msg.sender === "other" && (
                    <p className={`text-xs text-gray-400 mb-2 mx-1`}>
                      {formatTime(msg.timestamp)}
                    </p>
                  )}
                </div>
              ))
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-gray-400">
                <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡∏¢</p>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>
        )}
      </div>

      {/* Input area (only in chat view) */}
      {view === "chat" && (
        <div className="p-2 bg-gray-300/35">
          <div className="flex items-center gap-2">
            <textarea
              className="flex-1 py-1 px-3 border border-gray-300 bg-white rounded-full resize-none focus:outline-none focus:border-primary-blue-400 transition-colors"
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
              rows={1}
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyDown={handleKeyPress}
            />
            <button 
              className="p-2 bg-primary-blue-500 text-white rounded-xl hover:bg-primary-blue-400 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              onClick={sendMessage}
              disabled={!newMessage.trim() || !selectedChat}
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                width="20" 
                height="20" 
                viewBox="0 0 24 24" 
                fill="none" 
                stroke="currentColor" 
                strokeWidth="1.5" 
                strokeLinecap="round" 
                strokeLinejoin="round"
              >
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
              </svg>
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default ChatWindow;